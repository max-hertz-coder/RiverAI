from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from bot_app.database import db
from bot_app.keyboards import students as student_kb

router = Router()

# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
class AddStudentFSM(StatesGroup):
    name    = State()
    subject = State()
    level   = State()
    notes   = State()

class EditStudentFSM(StatesGroup):
    name    = State()
    subject = State()
    level   = State()
    notes   = State()

# 1) –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
@router.callback_query(F.data == "show_students")
async def cb_show_students(callback: CallbackQuery):
    user_id = callback.from_user.id
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î
    if await db.get_user_by_tg_id(user_id) is None:
        await db.create_user(user_id, callback.from_user.first_name or "")
    students = await db.get_students_by_user(user_id)
    text = "–í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:" if True else "Your students:"
    if not students:
        text += "\n_(—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç)_" 
    await callback.message.edit_text(
        text,
        reply_markup=student_kb.students_list_kb(students, lang="RU"),
    )

# 2) –ù–∞—á–∞–ª–æ FSM –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
@router.callback_query(F.data == "add_student")
async def cb_add_student(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    if await db.get_user_by_tg_id(callback.from_user.id) is None:
        await db.create_user(callback.from_user.id, callback.from_user.first_name or "")
    await state.clear()
    await state.set_state(AddStudentFSM.name)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:")

# –®–∞–≥ 1: –∏–º—è
@router.message(AddStudentFSM.name)
async def add_student_name_step(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.reply("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:")
        return
    await state.update_data(name=name)
    await state.set_state(AddStudentFSM.subject)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:")

# –®–∞–≥ 2: –ø—Ä–µ–¥–º–µ—Ç
@router.message(AddStudentFSM.subject)
async def add_student_subject_step(message: Message, state: FSMContext):
    subject = message.text.strip()
    if not subject:
        await message.reply("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:")
        return
    await state.update_data(subject=subject)
    await state.set_state(AddStudentFSM.level)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —É—á–µ–Ω–∏–∫–∞:")

# –®–∞–≥ 3: —É—Ä–æ–≤–µ–Ω—å
@router.message(AddStudentFSM.level)
async def add_student_level_step(message: Message, state: FSMContext):
    level = message.text.strip()
    if not level:
        await message.reply("–£—Ä–æ–≤–µ–Ω—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:")
        return
    await state.update_data(level=level)
    await state.set_state(AddStudentFSM.notes)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ '-' –µ—Å–ª–∏ –±–µ–∑ –∑–∞–º–µ—Ç–æ–∫:")

# –®–∞–≥ 4: –∑–∞–º–µ—Ç–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
@router.message(AddStudentFSM.notes)
async def add_student_notes_step(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if await db.get_user_by_tg_id(user_id) is None:
        await db.create_user(user_id, message.from_user.first_name or "")

    notes = message.text.strip()
    if notes == "-":
        notes = ""
    data = await state.get_data()
    student_id = await db.add_student(
        user_id,
        data["name"],
        data["subject"],
        data["level"],
        notes,
    )
    await state.clear()

    if student_id:
        await message.answer(f"–£—á–µ–Ω–∏–∫ '{data['name']}' –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=student_kb.back_button(),
    )

# –î–∞–ª–µ–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ: cb_select_student, cb_open_chat, cb_edit_student –∏ —Ç.–¥.
# –ù–æ **–≤–∞–∂–Ω–æ** –Ω–∞ –≤—Å–µ—Ö —Ç–æ—á–∫–∞—Ö, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è user_id, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å:
# if await db.get_user_by_tg_id(user_id) is None: await db.create_user(...)
# —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å ForeignKeyViolationError.

class AddStudentFSM(StatesGroup):
    name    = State()
    subject = State()
    level   = State()
    notes   = State()


class EditStudentFSM(StatesGroup):
    name    = State()
    subject = State()
    level   = State()
    notes   = State()


async def _ensure_user(user_id: int, first_name: str):
    """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ users, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç."""
    if await db.get_user_by_tg_id(user_id) is None:
        await db.create_user(user_id, first_name or "")


# 1) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ (–ø–æ Callback –∏ –ø–æ Reply-–∫–Ω–æ–ø–∫–µ)
@router.callback_query(F.data == "show_students")
async def cb_show_students(callback: CallbackQuery):
    await _ensure_user(callback.from_user.id, callback.from_user.first_name)
    students = await db.get_students_by_user(callback.from_user.id)
    text = "–í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:" + ("\n_(—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç)_" if not students else "")
    await callback.message.edit_text(
        text,
        reply_markup=student_kb.students_list_kb(students, lang="RU")
    )


@router.message(F.text == "üë§ –£—á–µ–Ω–∏–∫–∏")
async def msg_show_students(message: Message):
    await _ensure_user(message.from_user.id, message.from_user.first_name)
    students = await db.get_students_by_user(message.from_user.id)
    text = "–í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:" + ("\n_(—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç)_" if not students else "")
    await message.answer(text, reply_markup=student_kb.students_list_kb(students, lang="RU"))


# 2) –ù–∞—á–∏–Ω–∞–µ–º FSM –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (Callback –∏ Reply)
@router.callback_query(F.data == "add_student")
async def cb_add_student(callback: CallbackQuery, state: FSMContext):
    await _ensure_user(callback.from_user.id, callback.from_user.first_name)
    await state.clear()
    await state.set_state(AddStudentFSM.name)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:")


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
async def msg_add_student(message: Message, state: FSMContext):
    await _ensure_user(message.from_user.id, message.from_user.first_name)
    await state.clear()
    await state.set_state(AddStudentFSM.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:")


# –®–∞–≥–∏ FSM –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@router.message(AddStudentFSM.name)
async def add_student_name_step(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        return await message.reply("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:")
    await state.update_data(name=name)
    await state.set_state(AddStudentFSM.subject)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:")


@router.message(AddStudentFSM.subject)
async def add_student_subject_step(message: Message, state: FSMContext):
    subject = message.text.strip()
    if not subject:
        return await message.reply("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:")
    await state.update_data(subject=subject)
    await state.set_state(AddStudentFSM.level)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —É—á–µ–Ω–∏–∫–∞:")


@router.message(AddStudentFSM.level)
async def add_student_level_step(message: Message, state: FSMContext):
    level = message.text.strip()
    if not level:
        return await message.reply("–£—Ä–æ–≤–µ–Ω—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —É—á–µ–Ω–∏–∫–∞:")
    await state.update_data(level=level)
    await state.set_state(AddStudentFSM.notes)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ '-' –µ—Å–ª–∏ –±–µ–∑ –∑–∞–º–µ—Ç–æ–∫:")


@router.message(AddStudentFSM.notes)
async def add_student_notes_step(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await _ensure_user(user_id, message.from_user.first_name)

    notes = message.text.strip()
    if notes == "-":
        notes = ""
    data = await state.get_data()
    student_id = await db.add_student(
        user_id,
        data["name"],
        data["subject"],
        data["level"],
        notes,
    )
    await state.clear()

    if student_id:
        await message.answer(f"–£—á–µ–Ω–∏–∫ '{data['name']}' –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=student_kb.back_button()
    )


# 3) –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
@router.callback_query(F.data.startswith("student:"))
async def cb_select_student(callback: CallbackQuery):
    student_id = int(callback.data.split(":")[1])
    student = await db.get_student(student_id)
    if not student:
        return await callback.answer("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    text = f"–î–µ–π—Å—Ç–≤–∏—è —Å —É—á–µ–Ω–∏–∫–æ–º: {student['name']}"
    await callback.message.edit_text(
        text,
        reply_markup=student_kb.student_actions_kb(student_id, lang="RU")
    )


# 4) –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–∞
@router.callback_query(F.data.startswith("open_chat:"))
async def cb_open_chat(callback: CallbackQuery):
    student_id = int(callback.data.split(":")[1])
    student = await db.get_student(student_id)
    if not student:
        return await callback.answer("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    header = f"üë§ {student['name']} | –ü—Ä–µ–¥–º–µ—Ç: {student['subject']} | –£—Ä–æ–≤–µ–Ω—å: {student['level']}"
    await callback.message.edit_text(
        header,
        reply_markup=student_kb.chat_menu_kb(student_id, lang="RU")
    )


# 5) FSM —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@router.callback_query(F.data.startswith("edit_student:"))
async def cb_edit_student(callback: CallbackQuery, state: FSMContext):
    student_id = int(callback.data.split(":")[1])
    student = await db.get_student(student_id)
    if not student:
        return await callback.answer("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤ context
    await state.update_data(
        student_id=student_id,
        current_name=student["name"],
        current_subject=student["subject"],
        current_level=student["level"],
        current_notes=student["notes"],
    )
    await state.set_state(EditStudentFSM.name)
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–µ–µ –∏–º—è: {student['name']}\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (–∏–ª–∏ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π):"
    )


@router.message(EditStudentFSM.name)
async def edit_student_name_step(message: Message, state: FSMContext):
    data = await state.get_data()
    text = message.text.strip()
    new_name = data["current_name"] if text.lower() in ("", "/skip") else text
    await state.update_data(new_name=new_name)
    await state.set_state(EditStudentFSM.subject)
    await message.answer(
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç: {data['current_subject']}\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç (–∏–ª–∏ /skip):"
    )


@router.message(EditStudentFSM.subject)
async def edit_student_subject_step(message: Message, state: FSMContext):
    data = await state.get_data()
    text = message.text.strip()
    new_subject = data["current_subject"] if text.lower() in ("", "/skip") else text
    await state.update_data(new_subject=new_subject)
    await state.set_state(EditStudentFSM.level)
    await message.answer(
        f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {data['current_level']}\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (–∏–ª–∏ /skip):"
    )


@router.message(EditStudentFSM.level)
async def edit_student_level_step(message: Message, state: FSMContext):
    data = await state.get_data()
    text = message.text.strip()
    new_level = data["current_level"] if text.lower() in ("", "/skip") else text
    await state.update_data(new_level=new_level)
    await state.set_state(EditStudentFSM.notes)
    curr = data["current_notes"] or "(–Ω–µ—Ç)"
    await message.answer(
        f"–¢–µ–∫—É—â–∏–µ –∑–∞–º–µ—Ç–∫–∏: {curr}\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–∏–ª–∏ /skip):"
    )


@router.message(EditStudentFSM.notes)
async def edit_student_notes_step(message: Message, state: FSMContext):
    data = await state.get_data()
    text = message.text.strip()
    new_notes = data["current_notes"] if text.lower() == "/skip" else text
    sid = data["student_id"]

    await db.update_student(
        sid,
        data["new_name"],
        data["new_subject"],
        data["new_level"],
        new_notes,
    )
    await message.answer("–î–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ")
    await state.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫
    students = await db.get_students_by_user(message.from_user.id)
    await message.answer(
        "–í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:",
        reply_markup=student_kb.students_list_kb(students, lang="RU")
    )


# 6) –£–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞
@router.callback_query(F.data.startswith("delete_student:"))
async def cb_delete_student(callback: CallbackQuery):
    student_id = int(callback.data.split(":")[1])
    student = await db.get_student(student_id)
    if not student:
        return await callback.answer("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    await callback.message.edit_text(
        f"–£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ {student['name']}? –í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        reply_markup=student_kb.confirm_delete_kb(student_id, lang="RU")
    )


@router.callback_query(F.data.startswith("confirm_delete:"))
async def cb_confirm_delete(callback: CallbackQuery):
    parts = callback.data.split(":")
    if len(parts) != 3:
        return
    sid = int(parts[1])
    confirm = parts[2]

    if confirm == "yes":
        await db.delete_student(sid)
        await callback.answer("–£—á–µ–Ω–∏–∫ —É–¥–∞–ª—ë–Ω")
        students = await db.get_students_by_user(callback.from_user.id)
        await callback.message.edit_text(
            "–£—á–µ–Ω–∏–∫ —É–¥–∞–ª—ë–Ω.\n–í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:",
            reply_markup=student_kb.students_list_kb(students, lang="RU")
        )
    else:
        # –æ—Ç–º–µ–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        student = await db.get_student(sid)
        await callback.message.edit_text(
            f"–î–µ–π—Å—Ç–≤–∏—è —Å —É—á–µ–Ω–∏–∫–æ–º: {student['name']}",
            reply_markup=student_kb.student_actions_kb(sid, lang="RU")
        )