# bot_app/handlers/chatgpt.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import json
import aio_pika

from bot_app import config
from bot_app.keyboards.chat_menu import chat_menu_kb
from bot_app.main import rabbit_channel

router = Router()


class ChatGPTDialog(StatesGroup):
    active = State()


@router.callback_query(F.data.startswith("chat_gpt:"))
async def cb_chat_gpt(callback: CallbackQuery, state: FSMContext):
    student_id = int(callback.data.split(":", 1)[1])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º student_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(student_id=student_id)
    await state.set_state(ChatGPTDialog.active)
    await callback.message.edit_text(
        "üí¨ –ß–∞—Ç —Å GPT –æ—Ç–∫—Ä—ã—Ç. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ò–ò (–∏–ª–∏ /back –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
    )


@router.message(ChatGPTDialog.active)
async def handle_gpt_dialog_message(message: Message, state: FSMContext):
    data = await state.get_data()
    student_id = data.get("student_id")
    user_id = message.from_user.id
    user_text = message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞
    if user_text.lower() in ("/exit", "/back"):
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ worker
        task = {
            "type": "end_chat",
            "user_id": user_id,
            "student_id": student_id,
        }
        await rabbit_channel.default_exchange.publish(
            aio_pika.Message(body=json.dumps(task).encode("utf-8")),
            routing_key=config.RABBITMQ_TASK_QUEUE,
        )
        # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
        await message.answer(
            "üîö –ß–∞—Ç —Å GPT –∑–∞–≤–µ—Ä—à—ë–Ω.",
            reply_markup=chat_menu_kb(student_id, lang="RU"),
        )

    else:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ GPT
        task = {
            "type": "chat_gpt",
            "user_id": user_id,
            "student_id": student_id,
            "message": user_text,
        }
        await rabbit_channel.default_exchange.publish(
            aio_pika.Message(body=json.dumps(task).encode("utf-8")),
            routing_key=config.RABBITMQ_TASK_QUEUE,
        )
        # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        await message.answer("üí≠ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ò–ò, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç...")
