# bot_app/handlers/chatgpt.py

import json
import logging

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import aio_pika

from bot_app import config
from bot_app.keyboards.chat_menu import chat_menu_kb
import bot_app.main as main_module  # —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—Ä–∞—Ç—å main_module.rabbit_channel

router = Router()

class ChatGPTDialog(StatesGroup):
    active = State()


@router.callback_query(F.data.startswith("chat_gpt:"))
async def cb_chat_gpt(callback: CallbackQuery, state: FSMContext):
    student_id = int(callback.data.split(":", 1)[1])
    await state.update_data(student_id=student_id)
    await state.set_state(ChatGPTDialog.active)
    await callback.message.edit_text(
        "üí¨ –ß–∞—Ç —Å GPT –æ—Ç–∫—Ä—ã—Ç. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ò–ò (–∏–ª–∏ /back –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
    )


@router.message(ChatGPTDialog.active)
async def handle_gpt_dialog_message(message: Message, state: FSMContext):
    data       = await state.get_data()
    student_id = data.get("student_id")
    user_id    = message.from_user.id
    user_text  = message.text.strip()

    async def publish_task(task: dict) -> bool:
        """
        –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É –≤ RabbitMQ.
        –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.
        –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ.
        """
        channel = main_module.rabbit_channel

        # –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ ‚Äî –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        if channel is None:
            try:
                conn = await aio_pika.connect_robust(
                    host=config.RABBITMQ_HOST,
                    port=config.RABBITMQ_PORT,
                    login=config.RABBITMQ_USER,
                    password=config.RABBITMQ_PASS,
                )
                channel = await conn.channel()
                main_module.rabbit_channel = channel
            except Exception as e:
                logging.exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å (re)connect –∫ RabbitMQ:")
                return False

        try:
            await channel.default_exchange.publish(
                aio_pika.Message(body=json.dumps(task).encode("utf-8")),
                routing_key=config.RABBITMQ_TASK_QUEUE,
            )
            return True
        except Exception as e:
            logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å:")
            return False

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —á–∞—Ç–∞
    if user_text.lower() in ("/exit", "/back"):
        task = {
            "type":       "end_chat",
            "user_id":    user_id,
            "student_id": student_id,
        }
        ok = await publish_task(task)
        await state.clear()

        if ok:
            await message.answer(
                "üîö –ß–∞—Ç —Å GPT –∑–∞–≤–µ—Ä—à—ë–Ω.",
                reply_markup=chat_menu_kb(student_id, lang="RU"),
            )
        else:
            await message.answer("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ò–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω—ã–π GPT-–∑–∞–ø—Ä–æ—Å
    task = {
        "type":       "chat_gpt",
        "user_id":    user_id,
        "student_id": student_id,
        "message":    user_text,
    }
    ok = await publish_task(task)
    if ok:
        await message.answer("üí≠ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ò–ò, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç...")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
