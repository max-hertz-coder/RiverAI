import asyncio
import logging
import json

import aio_pika
from aiogram import Bot, Dispatcher
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import BotCommand

from bot_app import config
from bot_app.database import db
from bot_app.middlewares.auth import AuthMiddleware
from bot_app.handlers import start, students, generation, chatgpt, subscription, settings
from bot_app.keyboards.chat_menu import (
    chat_gpt_back_kb,
    result_plan_kb,
    result_tasks_kb,
    result_check_kb,
)


async def process_result(message: aio_pika.IncomingMessage) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —à–ª—ë–º –µ–≥–æ –≤ Telegram."""
    async with message.process():
        try:
            data = json.loads(message.body)
        except Exception as e:
            logging.error(f"‚ùå process_result ‚Äî –Ω–µ–≤–µ—Ä–Ω—ã–π JSON: {e}")
            return

        user_id = data.get("user_id")
        t       = data.get("type")
        answer  = data.get("answer") or ""
        logging.info(f"‚ñ∂ process_result: type={t} user={user_id}")

        if t == "chat":
            # –≤–æ—Ç –∑–¥–µ—Å—å —Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            await process_result.bot.send_message(
                user_id,
                answer,
                reply_markup=chat_gpt_back_kb()
            )
        elif t == "plan":
            text = f"üìÑ –ü–ª–∞–Ω:\n{data.get('plan_text','(–ø—É—Å—Ç–æ)')}"
            await process_result.bot.send_message(user_id, text, reply_markup=result_plan_kb(data.get("student_id")))
        elif t == "tasks":
            text = f"üìù –ó–∞–¥–∞–Ω–∏—è:\n{data.get('tasks_text','(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)')}"
            await process_result.bot.send_message(user_id, text, reply_markup=result_tasks_kb(data.get("student_id")))
        elif t == "check":
            text = f"‚úîÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n{data.get('report_text','(–Ω–µ—Ç –æ—Ç—á—ë—Ç–∞)')}"
            await process_result.bot.send_message(user_id, text, reply_markup=result_check_kb(data.get("student_id")))
        elif t == "error":
            await process_result.bot.send_message(user_id, f"‚ö†Ô∏è {data.get('message','–û—à–∏–±–∫–∞')}")
        else:
            logging.warning(f"‚ùì process_result: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π type={t}")


async def on_startup(bot: Bot, dp: Dispatcher) -> None:
    logging.info("üöÄ on_startup: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—á–µ—Ä–µ–¥—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    # 1) –∫–æ–º–∞–Ω–¥—ã Telegram
    await bot.set_my_commands([
        BotCommand("show_students", "üë§ –£—á–µ–Ω–∏–∫–∏"),
        BotCommand("add_student",   "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞"),
        BotCommand("settings",      "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand("subscription",  "üí≥ –û–ø–ª–∞—Ç–∞"),
    ])

    # 2) –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ
    connection = await aio_pika.connect_robust(
        host=config.RABBITMQ_HOST,
        port=config.RABBITMQ_PORT,
        login=config.RABBITMQ_USER,
        password=config.RABBITMQ_PASS
    )
    channel = await connection.channel()
    logging.info("‚úîÔ∏è Connected to RabbitMQ")

    # 3) –¥–µ–∫–ª–∞—Ä–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
    result_q = await channel.declare_queue(config.RESULT_QUEUE, durable=True)
    process_result.bot = bot   # –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º bot –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    await result_q.consume(process_result, no_ack=False)
    logging.info(f"üîî Subscribed to result queue '{config.RESULT_QUEUE}'")


async def on_shutdown(bot: Bot, dp: Dispatcher) -> None:
    logging.info("üîå on_shutdown: –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –ë–î")
    if db._pool:
        await db._pool.close()


async def main() -> None:
    logging.basicConfig(level=logging.INFO)

    # 0) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª PostgreSQL –î–û —Å–æ–∑–¥–∞–Ω–∏—è Dispatcher
    dsn = (
        f"postgresql://{config.DB_USER}:{config.DB_PASSWORD}"
        f"@{config.DB_HOST}:{config.DB_PORT}/{config.DB_NAME}"
    )
    await db.init_db_pool(dsn)
    logging.info("‚úîÔ∏è Database pool initialized")

    # 1) —Å–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
    bot = Bot(
        token=config.BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )

    # 2) –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å FSM –Ω–∞ Redis
    dp = Dispatcher(
        storage=RedisStorage.from_url(
            f"redis://{config.REDIS_HOST}:{config.REDIS_PORT}/{config.REDIS_DB_FSM}"
        )
    )

    # 3) middleware (AuthMiddleware —Å—Ä–∞–∑—É –Ω–∞–π–¥—ë—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–ª)
    dp.message.middleware(AuthMiddleware())
    dp.callback_query.middleware(AuthMiddleware())

    # 4) —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –≤–∞—à–∏ —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(start.router)
    dp.include_router(students.router)
    dp.include_router(generation.router)
    dp.include_router(chatgpt.router)
    dp.include_router(subscription.router)
    dp.include_router(settings.router)

    # 5) —Å—Ç–∞—Ä—Ç—É–µ–º polling
    await dp.start_polling(
        bot,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
    )


if __name__ == "__main__":
    asyncio.run(main())
