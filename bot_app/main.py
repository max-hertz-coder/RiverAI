import asyncio
import logging
import json

from aiogram import Bot, Dispatcher
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import BotCommand

import aio_pika

from bot_app import config
from bot_app.database import db
from bot_app.middlewares.auth import AuthMiddleware
from bot_app.handlers import start, students, generation, chatgpt, subscription, settings
from bot_app.keyboards.main_menu import bottom_menu_kb
from bot_app.keyboards.chat_menu import (
    chat_gpt_back_kb,
    chat_menu_kb,
    result_plan_kb,
    result_tasks_kb,
    result_check_kb,
)

rabbit_channel: aio_pika.Channel = None

async def on_startup(bot: Bot, dp: Dispatcher):
    logging.info("=== on_startup: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RabbitMQ ===")

    # 1) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ Telegram
    await bot.set_my_commands([
        BotCommand("show_students", "üë§ –£—á–µ–Ω–∏–∫–∏"),
        BotCommand("add_student",   "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞"),
        BotCommand("settings",      "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand("subscription",  "üí≥ –û–ø–ª–∞—Ç–∞"),
    ])

    # 2) –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ
    connection = await aio_pika.connect_robust(
        host=config.RABBITMQ_HOST,
        port=config.RABBITMQ_PORT,
        login=config.RABBITMQ_USER,
        password=config.RABBITMQ_PASS,
    )
    global rabbit_channel
    rabbit_channel = await connection.channel()

    # 3) –î–µ–∫–ª–∞—Ä–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥–∏
    await rabbit_channel.declare_queue(config.RABBITMQ_TASK_QUEUE, durable=True)
    result_queue = await rabbit_channel.declare_queue(config.RABBITMQ_RESULT_QUEUE, durable=True)

    # 4) –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await result_queue.consume(lambda msg: asyncio.create_task(process_result(msg, bot)))

async def on_shutdown(bot: Bot, dp: Dispatcher):
    logging.info("=== on_shutdown: –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –ë–î ===")
    if db._pool:
        await db._pool.close()

async def process_result(message: aio_pika.IncomingMessage, bot: Bot):
    async with message.process():
        try:
            data = json.loads(message.body.decode())
        except Exception as e:
            logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return

        user_id = data.get("user_id")
        t       = data.get("type")

        if t == "plan":
            text = f"üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω:\n{data.get('plan_text','(–ø—É—Å—Ç–æ)')}"
            await bot.send_message(
                user_id,
                text,
                reply_markup=result_plan_kb(data.get("student_id"), lang="RU")
            )

        elif t == "tasks":
            text = f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n{data.get('tasks_text','(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)')}"
            await bot.send_message(
                user_id,
                text,
                reply_markup=result_tasks_kb(data.get("student_id"), lang="RU")
            )

        elif t == "check":
            text = f"‚úîÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n{data.get('report_text','(–Ω–µ—Ç –æ—Ç—á—ë—Ç–∞)')}"
            await bot.send_message(
                user_id,
                text,
                reply_markup=result_check_kb(data.get("student_id"), lang="RU")
            )

        elif t == "chat":
            await bot.send_message(
                user_id,
                data.get("answer",""),
                reply_markup=chat_gpt_back_kb(lang="RU")
            )

        elif t == "error":
            await bot.send_message(user_id, f"‚ö†Ô∏è {data.get('message','–û—à–∏–±–∫–∞')}")

async def main():
    logging.basicConfig(level=logging.INFO)

    # 0) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª PostgreSQL –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ middleware
    dsn = (
        f"postgresql://{config.DB_USER}:{config.DB_PASSWORD}"
        f"@{config.DB_HOST}:{config.DB_PORT}/{config.DB_NAME}"
    )
    await db.init_db_pool(dsn)

    # 1) –°–æ–∑–¥–∞—ë–º –±–æ—Ç
    bot = Bot(
        token=config.BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )

    # 2) –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å Redis-FSM
    dp = Dispatcher(storage=RedisStorage.from_url(
        f"redis://{config.REDIS_HOST}:{config.REDIS_PORT}/{config.REDIS_DB}"
    ))

    # 3) –ü–æ–¥–∫–ª—é—á–∞–µ–º middlewares (AuthMiddleware —Ç–µ–ø–µ—Ä—å –Ω–∞–π–¥—ë—Ç db._pool)
    dp.message.middleware(AuthMiddleware())
    dp.callback_query.middleware(AuthMiddleware())

    # 4) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(start.router)
    dp.include_router(students.router)
    dp.include_router(generation.router)
    dp.include_router(chatgpt.router)
    dp.include_router(subscription.router)
    dp.include_router(settings.router)

    # 5) –°—Ç–∞—Ä—Ç—É–µ–º polling
    await dp.start_polling(bot, on_startup=on_startup, on_shutdown=on_shutdown)

if __name__ == "__main__":
    asyncio.run(main())
